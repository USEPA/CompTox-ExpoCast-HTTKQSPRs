"DTXSID",
"PREFERRED_NAME",
"CASRN","Human.Clint.httk","Human.Fup.httk",
"Human.Clint.OPERA","Human.Fup.OPERA")]
level1tab4$QSPR <- "OPERA"
colnames(level1tab4)[6:7] <- c("Human.Clint.pred","Human.Fup.pred")
level1tab5 <- level1tab[,c(
"DTXSID",
"PREFERRED_NAME",
"CASRN","Human.Clint.httk","Human.Fup.httk",
"Human.Clint.IVBP")]
level1tab5 <- cbind(level1tab5,NA)
level1tab5$QSPR <- "IVBP"
colnames(level1tab5)[6:7] <- c("Human.Clint.pred","Human.Fup.pred")
level1tab <- rbind(level1tab1,level1tab2,level1tab3,level1tab4,level1tab5)
level1tab$Human.Fup.pred <- as.numeric(level1tab$Human.Fup.pred)
level1tab$Human.Clint.pred <- as.numeric(level1tab$Human.Clint.pred)
#Absolute fold error (AbsFE) : abs(log10(pred/obs))
level1tab$Human.Clint.AbsFE <- abs(log10(level1tab$Human.Clint.pred /
level1tab$Human.Clint.httk))
level1tab$Human.fup.AbsFE <- abs(log10(level1tab$Human.Fup.pred /
level1tab$Human.Fup.httk))
# Fo
level1tab$Human.Clint.FE<- log10(level1tab$Human.Clint.pred /
level1tab$Human.Clint.httk)
level1tab$Human.fup.FE<- log10(level1tab$Human.Fup.pred /
level1tab$Human.Fup.httk)
for (this.row in 1:dim(level1tab)[1])
{
this.Clint.AbsFE <- level1tab[this.row,"Human.Clint.AbsFE"]
if (!is.na(this.Clint.AbsFE))
{
if (!is.finite(this.Clint.AbsFE))
{
#Turn -Inf and Inf into NA
level1tab[this.row,"Human.Clint.AbsFE"] <- NA
level1tab[this.row,"Human.Clint.FE"] <- NA
}
if (is.nan(this.Clint.AbsFE))
{
#Turn NaN into 0 , because the NaN is a result of matching 0/0...and hence it was correctly identified.
level1tab[this.row,"Human.Clint.AbsFE"] <- 0
level1tab[this.row,"Human.Clint.FE"] <- 0
}
}
this.fup.AbsFE <- level1tab[this.row,"Human.fup.AbsFE"]
if (!is.na(this.fup.AbsFE))
{
if (!is.finite(this.fup.AbsFE))
{
#Turn -Inf and Inf into NA
level1tab[this.row,"Human.fup.AbsFE"] <- NA
level1tab[this.row,"Human.fup.FE"] <- NA
}
if (is.nan(this.fup.AbsFE))
{
#Turn NaN into 0 , because the NaN is a result of matching 0/0...and hence it was correctly identified.
level1tab[this.row,"Human.fup.AbsFE"] <- 0
level1tab[this.row,"Human.fup.FE"] <- 0
}
}
}
TOOCLOSE.THRESHOLD <- 0.01
possible.training.chems <- NULL
for (this.row in 1:dim(level1tab)[1])
{
clint <- level1tab[this.row,"Human.Clint.AbsFE"]
fup <- level1tab[this.row,"Human.fup.AbsFE"]
if (!is.na(clint))
{
if (!is.na(fup))
{
if (clint < TOOCLOSE.THRESHOLD & fup < TOOCLOSE.THRESHOLD)
{
possible.training.chems <- rbind(possible.training.chems,
level1tab[this.row,])
level1tab[this.row,"Human.Clint.pred"] <-NA
level1tab[this.row,"Human.Clint.AbsFE"] <-NA
level1tab[this.row,"Human.Fup.pred"] <-NA
level1tab[this.row,"Human.fup.AbsFE"] <-NA
}
}
}
}
for (this.col in colnames(possible.training.chems))
if (is.numeric(possible.training.chems[1,this.col]))
possible.training.chems[,this.col] <-
signif(possible.training.chems[,this.col],3)
write.csv(possible.training.chems,row.names=FALSE,
file="SupTable/SupTable-PossibleTrainingChems.txt")
ks.tests.clint <- data.frame()
ks.tests.fup <- data.frame()
FE.table <- data.frame()
for (this.qspr1 in unique(level1tab$QSPR))
{
this.subset <-subset(level1tab,QSPR==this.qspr1)
FE.table[this.qspr1,"Median.Clint.AbsFE"] <-
median(this.subset$Human.Clint.AbsFE,na.rm=TRUE)
FE.table[this.qspr1,"Median.Clint.FE"] <-
median(this.subset$Human.Clint.FE,na.rm=TRUE)
FE.table[this.qspr1,"Min.Clint.FE"] <-
min(this.subset$Human.Clint.FE,na.rm=TRUE)
FE.table[this.qspr1,"Max.Clint.FE"] <-
max(this.subset$Human.Clint.FE,na.rm=TRUE)
FE.table[this.qspr1,"Median.fup.AbsFE"] <-
median(this.subset$Human.fup.AbsFE,na.rm=TRUE)
FE.table[this.qspr1,"Median.fup.FE"] <-
median(this.subset$Human.fup.FE,na.rm=TRUE)
FE.table[this.qspr1,"Min.fup.FE"] <-
min(this.subset$Human.fup.FE,na.rm=TRUE)
FE.table[this.qspr1,"Max.fup.FE"] <-
max(this.subset$Human.fup.FE,na.rm=TRUE)
for (this.qspr2 in unique(level1tab$QSPR))
{
set1 <- this.subset$Human.Clint.FE
set2 <- subset(level1tab,QSPR==this.qspr2)$Human.Clint.FE
if (any(!is.na(set1)) & any(!is.na(set2))) ks.tests.clint[this.qspr1,this.qspr2] <- suppressWarnings(
ks.test(set1,set2)$p.value)
set1 <- this.subset$Human.fup.FE
set2 <- subset(level1tab,QSPR==this.qspr2)$Human.fup.FE
if (any(!is.na(set1)) & any(!is.na(set2))) ks.tests.fup[this.qspr1,this.qspr2] <- suppressWarnings(
ks.test(set1,set2)$p.value)
}
}
FE.table <- apply(FE.table,2,function(x) signif(x,3))
print(ks.tests.clint)
print(ks.tests.fup)
write.csv(FE.table,file="Table-Level1FoldErrors.txt")
level1tab[,"Human.Clint.RPE"] <-
(as.numeric(level1tab[,"Human.Clint.pred"]) -
as.numeric(level1tab[,"Human.Clint.httk"])) /
as.numeric(level1tab[,"Human.Clint.httk"])
level1tab[,"Human.Fup.RPE"] <-
(as.numeric(level1tab[,"Human.Fup.pred"]) -
as.numeric(level1tab[,"Human.Fup.httk"])) /
as.numeric(level1tab[,"Human.Fup.httk"])
hist(subset(level1tab,QSPR=="Dawson")$Human.Clint.RPE,main="Dawson",xlab="Clint RPE")
hist(subset(level1tab,QSPR=="Pradeep")$Human.Clint.RPE,main="Pradeep",xlab="Clint RPE")
hist(subset(level1tab,QSPR=="SPlus")$Human.Clint.RPE,main="SPlus",xlab="Clint RPE")
hist(subset(level1tab,QSPR=="OPERA")$Human.Clint.RPE,main="OPERA",xlab="Clint RPE")
hist(subset(level1tab,QSPR=="Dawson")$Human.Fup.RPE,main="Dawson",xlab="Fup RPE")
hist(subset(level1tab,QSPR=="Pradeep")$Human.Fup.RPE,main="Pradeep",xlab="Fup RPE")
hist(subset(level1tab,QSPR=="SPlus")$Human.Fup.RPE,main="SPlus",xlab="Fup RPE")
hist(subset(level1tab,QSPR=="OPERA")$Human.Fup.RPE,main="OPERA",xlab="Fup RPE")
for (this.chem in unique(level1tab$DTXSID))
{
this.subset <- subset(level1tab,DTXSID==this.chem)
this.mean.clint <- mean(this.subset$Human.Clint.RPE,na.rm=T)
level1tab[level1tab$DTXSID==this.chem & is.na(level1tab$Human.Clint.RPE),
"Human.Clint.RPE"] <- this.mean.clint
this.mean.fup <- mean(this.subset$Human.Fup.RPE,na.rm=T)
level1tab[level1tab$DTXSID==this.chem & is.na(level1tab$Human.Fup.RPE),
"Human.Fup.RPE"] <- this.mean.fup
}
hist(subset(level1tab,QSPR=="OPERA")$Human.Clint.RPE,main="OPERA",xlab="Clint RPE")
hist(subset(level1tab,QSPR=="OPERA")$Human.Fup.RPE,main="OPERA",xlab="Fup RPE")
FigLev1a <- ggplot(data=level1tab) +
geom_point(size=3,aes(x=Human.Clint.pred+10^-4,y=Human.Clint.httk+10^-4,shape=QSPR,color=QSPR))+
scale_x_log10(label=scientific_10) +
scale_y_log10(label=scientific_10)+
geom_abline(intercept = log10(10^(1/2)), slope = 1,linetype="dashed", colour="lightBlue") +
geom_abline(intercept = 0, slope = 1,linetype="solid", colour="Grey") +
geom_abline(intercept = log10(10^(-1/2)), slope = 1,linetype="dashed", colour="lightBlue") +
xlab(bquote('Predicted'~Cl[int]~"("*mu*"L/min/"*10^6~"hep.)")) +
ylab(bquote('Observed'~Cl[int]~"("*mu*"L/min/"*10^6~"hep.)")) +
theme_bw()+
theme( text  = element_text(size=20))
print(FigLev1a)
## Tiff image for manuscript (facet to see the individual predictions over Clint value)
FigLev1a_facet <- ggplot(data=level1tab) +
geom_point(size=2,aes(x=Human.Clint.pred+10^-1,y=Human.Clint.httk+10^-1,shape=QSPR,color=QSPR))+
scale_x_log10(breaks=c(1,10^2),label=scientific_10,limits=c(30^-1,3000)) +
#scale_y_log10(label=scientific_10)+
scale_y_log10(breaks=c(10^-1,1,10,10^2),label=scientific_10,limits = c(30^-1, 3000))+
geom_abline(intercept = 0, slope = 1,linetype="solid", colour="black",size=0.2) +
#geom_abline(intercept = log10(3), slope = 1,linetype="dotted", colour="gray") +
#geom_abline(intercept = -log10(3), slope = 1,linetype="dotted", colour="gray") +
geom_abline(intercept = 1, slope = 1,linetype="dashed", colour="gray66",size=0.3) +
geom_abline(intercept = -1, slope = 1,linetype="dashed", colour="gray66",size=0.3) +
xlab(bquote('Predicted'~Cl[int]~"("*mu*"L/min/"*10^6~"hep.)")) +
ylab(bquote('Observed'~Cl[int]~"("*mu*"L/min/"*10^6~"hep.)")) +
theme_bw()+
facet_grid(cols=vars(QSPR))+
theme( text  = element_text(size=20),
legend.position = "none",
axis.title = element_text(size=20),
axis.text.x = element_text(size=14))
print(FigLev1a_facet)
ggsave(paste("figs/FigLev1a_Clint_obsVpred_facet",output.prefix,".tiff",sep=""), width=4, height=1.7, dpi=300)
#Absolute Average Fold Error (AAFE) :  10^((1/n)*sum(abs(FE)))  ### use this. It's good to see fold error
ADMet.Human.Clint.AAFE<-10^(mean(level1tab$Human.Clint.AbsFE[level1tab$QSPR=="SPlus"],na.rm=TRUE))
Dawson.Human.Clint.AAFE<-10^(mean(level1tab$Human.Clint.AbsFE[level1tab$QSPR=="Dawson"],na.rm=TRUE))
OPERA.Human.Clint.AAFE<-10^(mean(level1tab$Human.Clint.AbsFE[level1tab$QSPR=="OPERA"],na.rm=TRUE))
Pradeep.Human.Clint.AAFE<-10^(mean(level1tab$Human.Clint.AbsFE[level1tab$QSPR=="Pradeep"],na.rm=TRUE))
ADMet.Human.fup.AAFE<-10^(mean(level1tab$Human.fup.AbsFE[level1tab$QSPR=="SPlus"],na.rm=TRUE))
Dawson.Human.fup.AAFE<-10^(mean(level1tab$Human.fup.AbsFE[level1tab$QSPR=="Dawson"],na.rm=TRUE))
OPERA.Human.fup.AAFE<-10^(mean(level1tab$Human.fup.AbsFE[level1tab$QSPR=="OPERA"],na.rm=TRUE))
Pradeep.Human.fup.AAFE<-10^(mean(level1tab$Human.fup.AbsFE[level1tab$QSPR=="Pradeep"],na.rm=TRUE))
#RMSLE sqrt(mean(log10(Xpred+1)-log10(Xobs+1))^2)  ### use this
ADMet.Human.Clint.RMSLE<-sqrt(mean((log10(level1tab$Human.Clint.pred[level1tab$QSPR=="SPlus"]+1)-log10(level1tab$Human.Clint.httk[level1tab$QSPR=="SPlus"]+1))^2,na.rm=TRUE))
Dawson.Human.Clint.RMSLE<-sqrt(mean((log10(level1tab$Human.Clint.pred[level1tab$QSPR=="Dawson"]+1)-log10(level1tab$Human.Clint.httk[level1tab$QSPR=="Dawson"]+1))^2,na.rm=TRUE))
OPERA.Human.Clint.RMSLE<-sqrt(mean((log10(level1tab$Human.Clint.pred[level1tab$QSPR=="OPERA"]+1)-log10(level1tab$Human.Clint.httk[level1tab$QSPR=="OPERA"]+1))^2,na.rm=TRUE))
Pradeep.Human.Clint.RMSLE<-sqrt(mean((log10(level1tab$Human.Clint.pred[level1tab$QSPR=="Pradeep"]+1)-log10(level1tab$Human.Clint.httk[level1tab$QSPR=="Pradeep"]+1))^2,na.rm=TRUE))
ADMet.Human.fup.RMSLE<-sqrt(mean((log10(level1tab$Human.Fup.pred[level1tab$QSPR=="SPlus"]+1)-log10(level1tab$Human.Fup.httk[level1tab$QSPR=="SPlus"]+1))^2,na.rm=TRUE))
Dawson.Human.fup.RMSLE<-sqrt(mean((log10(level1tab$Human.Fup.pred[level1tab$QSPR=="Dawson"]+1)-log10(level1tab$Human.Fup.httk[level1tab$QSPR=="Dawson"]+1))^2,na.rm=TRUE))
OPERA.Human.fup.RMSLE<-sqrt(mean((log10(level1tab$Human.Fup.pred[level1tab$QSPR=="OPERA"]+1)-log10(level1tab$Human.Fup.httk[level1tab$QSPR=="OPERA"]+1))^2,na.rm=TRUE))
Pradeep.Human.fup.RMSLE<-sqrt(mean((log10(level1tab$Human.Fup.pred[level1tab$QSPR=="Pradeep"]+1)-log10(level1tab$Human.Fup.httk[level1tab$QSPR=="Pradeep"]+1))^2,na.rm=TRUE))
Human.Clint.stats.table<-do.call("rbind",list(c(NA, "SPlus", "Dawson", "OPERA", "Pradeep"),
c("AAFE",round(ADMet.Human.Clint.AAFE,2),
round(Dawson.Human.Clint.AAFE,2),
round(OPERA.Human.Clint.AAFE,2),
round(Pradeep.Human.Clint.AAFE,2)),
c("RMSLE",round(ADMet.Human.Clint.RMSLE,2),
round(Dawson.Human.Clint.RMSLE,2),
round(OPERA.Human.Clint.RMSLE,2),
round(Pradeep.Human.Clint.RMSLE,2))))
Human.fup.stats.table<-do.call("rbind",list(c(NA, "SPlus", "Dawson", "OPERA", "Pradeep"),
c("AAFE",round(ADMet.Human.fup.AAFE,2),
round(Dawson.Human.fup.AAFE,2),
round(OPERA.Human.fup.AAFE,2),
round(Pradeep.Human.fup.AAFE,2)),
c("RMSLE",round(ADMet.Human.fup.RMSLE,2),
round(Dawson.Human.fup.RMSLE,2),
round(OPERA.Human.fup.RMSLE,2),
round(Pradeep.Human.fup.RMSLE,2))))
# colnames(Human.Clint.stats.table)<-Human.Clint.stats.table[1,]
# Human.Clint.stats.table<-Human.Clint.stats.table[2:3,]
# rownames(Human.Clint.stats.table)<-Human.Clint.stats.table[,1]
# Human.Clint.stats.table<-Human.Clint.stats.table[,2:5]
#### add AAFE & RMSLE to the table
FigLev1b.texty <- -2
FigLev1b<-ggplot(data=level1tab, aes(x=QSPR, y=Human.Clint.RPE)) +
geom_boxplot(lwd=.3,  #reduce the boxplot linewidth
outlier.shape=NA)+
coord_cartesian(ylim=c(-3,8))+ ### !!!!!!! "coord" does NOT alter the data if data points are removed. "scale" does
xlab("QSPR") +
ylab(bquote("Relative Error in"~Cl[int]))+
#  scale_y_log10(breaks=c(10^-3,10^-2,10^-1,1,10,10^2,10^3),label=scientific_10)+
#scale_y_continuous(limits=c(-100,100))+
theme_bw()+
# annotation_custom(tableGrob(Human.Clint.stats.table,theme = ttheme_default(base_size = 5),padding.h = unit(1, "mm")), ymin=-5, ymax=-2.5)+
#  annotation_custom(tableGrob(Human.Clint.stats.table,padding.v=unit(1, "mm")), ymin=-5, ymax=-2.5)+
annotation_custom(tableGrob(Human.Clint.stats.table[2:3,1], theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=1.5,ymin=(FigLev1b.texty-1),ymax=FigLev1b.texty)+
annotation_custom(tableGrob(Human.Clint.stats.table[2:3,3],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=2.3,ymin=(FigLev1b.texty-1),ymax=FigLev1b.texty)+
annotation_custom(tableGrob(Human.Clint.stats.table[2:3,4],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=4.3,ymin=(FigLev1b.texty-1),ymax=FigLev1b.texty)+
annotation_custom(tableGrob(Human.Clint.stats.table[2:3,5],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=6.3,ymin=(FigLev1b.texty-1),ymax=FigLev1b.texty)+
annotation_custom(tableGrob(Human.Clint.stats.table[2:3,2],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=8.3,ymin=(FigLev1b.texty-1),ymax=FigLev1b.texty)+
theme( text  = element_text(size=20),
legend.key.height=unit(.5,"line"),
legend.text=element_text(size=7),
legend.title = element_text(size=8))
print(FigLev1b)
ggsave(paste("figs/FigLev1b_Clint_boxplot_wtable",output.prefix,".tiff",sep=""), width=4, height=3, dpi=300)
FigLev1c <- ggplot(data=level1tab) +
geom_point(size=3,aes(x=Human.Fup.pred+10^-4,y=Human.Fup.httk+10^-4,shape=QSPR,color=QSPR))+
scale_x_log10(label=scientific_10) +
scale_y_log10(label=scientific_10)+
geom_abline(intercept = log10(10^(1/2)), slope = 1,linetype="dashed", colour="lightBlue") +
geom_abline(intercept = 0, slope = 1,linetype="solid", colour="Grey") +
geom_abline(intercept = log10(10^(-1/2)), slope = 1,linetype="dashed", colour="lightBlue") +
xlab(bquote('Predicted'~f[up])) +
ylab(bquote('Observed'~f[up])) +
theme_bw()+
theme( text  = element_text(size=20))
print(FigLev1c)
## faceted
FigLev1c <- ggplot(data=level1tab) +
geom_point(size=2,aes(x=Human.Fup.pred+10^-4,y=Human.Fup.httk+10^-4,shape=QSPR,color=QSPR))+
##  scale_x_log10(label=scientific_10) +
scale_x_log10(breaks=c(10^-8,10^-6,10^-4,10^-2,1),label=scientific_10)+
##  scale_y_log10(label=scientific_10)+
scale_y_log10(breaks=c(10^-8,10^-6,10^-4,10^-2,1),label=scientific_10)+
geom_abline(intercept = 0, slope = 1,linetype="solid", colour="black",size=0.2) +
# geom_abline(intercept = log10(3), slope = 1,linetype="dotted", colour="gray") +
#geom_abline(intercept = -log10(3), slope = 1,linetype="dotted", colour="gray") +
geom_abline(intercept = 1, slope = 1,linetype="dashed", colour="gray66",size=0.3) +
geom_abline(intercept = -1, slope = 1,linetype="dashed", colour="gray66",size=0.3) +
xlab(bquote('Predicted'~f[up])) +
ylab(bquote('Observed'~f[up])) +
facet_grid(cols=vars(QSPR))+
theme_bw()+
theme( text  = element_text(size=20),
legend.position = "none",
axis.title = element_text(size=20),
axis.text.x = element_text(size=14))
print(FigLev1c)
ggsave(paste("figs/FigLev1c_Fub_obsVpred_facet",output.prefix,".tiff",sep=""), width=4, height=1.7, dpi=300)
#ggsave(paste("figs/FigLev1c_Fub_obsVpred_facet_PradeepNEW",output.prefix,".tiff",sep=""), width=4, height=1.7, dpi=300)
FigLev1d <- ggplot(data=level1tab, aes(x=QSPR, y=Human.Fup.RPE)) +
geom_boxplot(outlier.colour="red",
outlier.size=2,
outlier.alpha=0.1)+
xlab("QSPR") +
ylab(bquote("Relative Prediction Error in"~f[up]))+
scale_y_log10(breaks=c(10^-2,10^-1,1,3,10,10^2,10^3),label=scientific_10)+
theme_bw()+
theme( text  = element_text(size=20))
print(FigLev1d)
#### add AAFE & RMSLE to the table
texty <- 3
FigLev1d<-ggplot(data=level1tab, aes(x=QSPR, y=Human.Fup.RPE)) +
geom_boxplot(lwd=.3,  #reduce the boxplot linewidth
outlier.shape=NA)+
# coord_cartesian(ylim=c(-3,6))+ ### Pradeep NEW !!!!!!! "coord" does NOT alter the data if data points are removed. "scale" does
coord_cartesian(ylim=c(-1.5,3))+ ### !!!!!!! "coord" does NOT alter the data if data points are removed. "scale" does
xlab("QSPR") +
ylab(bquote("Relative Error in"~f[up]))+
#  scale_y_log10(breaks=c(10^-3,10^-2,10^-1,1,10,10^2,10^3),label=scientific_10)+
#  scale_y_continuous(limits=c(-3,5))+
theme_bw()+
# annotation_custom(tableGrob(Human.Clint.stats.table,theme = ttheme_default(base_size = 5),padding.h = unit(1, "mm")), ymin=-5, ymax=-2.5)+
#  annotation_custom(tableGrob(Human.Clint.stats.table,padding.v=unit(1, "mm")), ymin=-5, ymax=-2.5)+
annotation_custom(tableGrob(Human.fup.stats.table[2:3,1], theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=1.5,ymin=(texty-1),ymax=texty)+
annotation_custom(tableGrob(Human.fup.stats.table[2:3,2],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=2.3,ymin=(texty-1),ymax=texty)+
annotation_custom(tableGrob(Human.fup.stats.table[2:3,3],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=4.3,ymin=(texty-1),ymax=texty)+
annotation_custom(tableGrob(Human.fup.stats.table[2:3,4],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=6.3,ymin=(texty-1),ymax=texty)+
annotation_custom(tableGrob(Human.fup.stats.table[2:3,5],rows=NULL, theme = ttheme_minimal(base_size = 14)),
xmin=0,xmax=8.3,ymin=(texty-1),ymax=texty)+
theme( text  = element_text(size=20),
legend.key.height=unit(.5,"line"),
legend.text=element_text(size=7),
legend.title = element_text(size=8))
print(FigLev1d)
ggsave(paste("figs/FigLev1d_fup_boxplot_wtable",output.prefix,".tiff",sep=""), width=4, height=3, dpi=300)
#ggsave(paste("figs/FigLev1d_fup_boxplot_wtable_PradeepNEW",output.prefix,".tiff",sep=""), width=4, height=3, dpi=300)
pharm <- read.csv("jm0613471_si_002.txt",sep="\t")
pharm <- subset(pharm,DTXSID!="-")
pest <- read_excel("Abass2012.xlsx")
pharm <- pharm[,c("Compound","PREFERRED_NAME","DTXSID","CASRN","ISOFORM","Author")]
pest <- pest[,c("Pesticide","PREFERRED_NAME","DTXSID","CASRN","Enzyme","Reference")]
colnames(pest) <- colnames(pharm)
cyps <- rbind(pharm,pest)
CvT.chems.opera <- subset(CvT.chems,DTXSID %in% c(
"DTXSID0022985",
"DTXSID1051432",
"DTXSID3032179",
"DTXSID30575892",
"DTXSID3061635",
"DTXSID5020285",
"DTXSID5024219",
"DTXSID50881104",
"DTXSID7030066",
"DTXSID80108992"))
CvT.chems <- subset(CvT.chems,!(DTXSID %in% c(
"DTXSID0022985",
"DTXSID1051432",
"DTXSID3032179",
"DTXSID30575892",
"DTXSID3061635",
"DTXSID5020285",
"DTXSID5024219",
"DTXSID50881104",
"DTXSID7030066",
"DTXSID80108992")))
CvT.data.opera <- subset(CvT.data,DTXSID %in% c(
"DTXSID0022985",
"DTXSID1051432",
"DTXSID3032179",
"DTXSID30575892",
"DTXSID3061635",
"DTXSID5020285",
"DTXSID5024219",
"DTXSID50881104",
"DTXSID7030066",
"DTXSID80108992"))
CvT.data <- subset(CvT.data,!(DTXSID %in% c(
"DTXSID0022985",
"DTXSID1051432",
"DTXSID3032179",
"DTXSID30575892",
"DTXSID3061635",
"DTXSID5020285",
"DTXSID5024219",
"DTXSID50881104",
"DTXSID7030066",
"DTXSID80108992")))
write.csv(CvT.chems.opera[,c(
"DTXSID",
"PREFERRED_NAME",
"CASRN")], row.names=FALSE,file="SupTable/SupTable-OPERAOnlyChems.txt")
CvT.chems.nofits <- CvT.chems[
!(CvT.chems$CASRN%in%fittable$CAS) |
CvT.chems$CASRN %in%subset(fittable,Model=="Flat")$CAS |
CvT.chems$CASRN %in%subset(fittable,Model=="None")$CAS
, ]
write.csv(CvT.chems.nofits[,c(
"DTXSID",
"PREFERRED_NAME",
"CASRN")], row.names=FALSE,file="SupTable/SupTable-NoEmpiricalFitChems.txt")
CvT.data <- subset(CvT.data, !(CAS %in% CvT.chems.nofits$CASRN))
length(unique(CvT.data$CAS)) # Number of chemicals with good fits
CvT.chems.notraining <- CvT.chems
for (this.qspr in unique(possible.training.chems$QSPR))
{
this.subset <- subset(possible.training.chems, QSPR==this.qspr)
for (this.id in this.subset$DTXSID)
{
CvT.chems.notraining[CvT.chems.notraining$DTXSID==this.id,
paste("Human.Clint",this.qspr,sep=".")]<-NA
CvT.chems.notraining[CvT.chems.notraining$DTXSID==this.id,
paste("Human.Fup",this.qspr,sep=".")]<-NA
}
}
dim(CvT.chems.notraining)
CvT.chems.nobad <- subset(CvT.chems.notraining,
!(DTXSID %in% CvT.chems.opera$DTXSID) &
!(DTXSID %in% CvT.chems.nofits$DTXSID))
dim(CvT.chems.nobad)
dim(CvT.data)
CvT.data <- subset(CvT.data,CAS%in%CvT.chems.nobad$CASRN)
# Hours to days:
CvT.data$Time <- CvT.data$Time/24
dim(CvT.data)
clint.cols <- colnames(CvT.chems.nobad)[
regexpr("Clint",colnames(CvT.chems.nobad))!=-1]
CvT.chems.nobad$Human.Clint.Max<- apply(
CvT.chems.nobad[,clint.cols],1,function(x) max(x,na.rm=TRUE))
CvT.chems.nobad$Human.Clint.Mean<- apply(
CvT.chems.nobad[,clint.cols],1,function(x) mean(x,na.rm=TRUE))
logit <- function(x)
{
return(sapply(x, function(x) log(x/(1-x))))
}
invlogit <- function(x)
{
return(sapply(x, function(x) exp(x)/(exp(x)+1)))
}
fup.cols <- colnames(CvT.chems.nobad)[
regexpr("Fup",colnames(CvT.chems.nobad))!=-1]
CvT.chems.nobad$Human.Fup.Mean <- apply(
CvT.chems.nobad[,fup.cols],1,function(x) invlogit(mean(sapply(x, function(y) logit(min(max(y,1e-8),(1-1e-8)))),na.rm=TRUE)))
CvT.chems.nona <- CvT.chems.nobad
# Can't run PBTK for fup=0
for (this.col in fup.cols)
CvT.chems.nona[is.na(CvT.chems.nona[,this.col]),this.col]<-0
for (this.col in fup.cols)
CvT.chems.nona[CvT.chems.nona[,this.col]==0,this.col]<-NA
for (this.chem in CvT.chems.nona$DTXSID)
{
this.row <- which(CvT.chems.nona$DTXSID==this.chem)
# Check Clints:
if (all(is.na(CvT.chems.nona[this.row,clint.cols])))
{
CvT.chems.nona <- subset(CvT.chems.nona,DTXSID!=this.chem)
} else if (any(is.na(CvT.chems.nona[this.row,clint.cols])))
{
for (this.col in clint.cols)
if (is.na(CvT.chems.nona[this.row,this.col]))
CvT.chems.nona[this.row,this.col] <-
CvT.chems.nona[this.row,"Human.Clint.Mean"]
}
# Check fups:
if (all(is.na(CvT.chems.nona[this.row,fup.cols])))
{
CvT.chems.nona <- subset(CvT.chems.nona,DTXSID!=this.chem)
} else if (any(is.na(CvT.chems.nona[this.row,fup.cols])) |
any(sapply(CvT.chems.nona[this.row,fup.cols],is.nan)))
{
for (this.col in fup.cols)
if (is.na(CvT.chems.nona[this.row,this.col]) |
is.nan(CvT.chems.nona[this.row,this.col]))
CvT.chems.nona[this.row,this.col] <-
CvT.chems.nona[this.row,"Human.Fup.Mean"]
}
}
set.seed(123456)
for (i in 1:10) # Ten sets of parameters
{
yrandom.ids <- sample(1:dim(CvT.chems.nona)[1],dim(CvT.chems.nona)[1])
CvT.chems.nona[,paste("Human.Clint.YRandom",i,sep="")] <-
CvT.chems.nona[yrandom.ids, "Human.Clint.httk"]
CvT.chems.nona[,paste("Human.Fup.YRandom",i,sep="")] <-
CvT.chems.nona[yrandom.ids, "Human.Fup.httk"]
}
clear_httk()
chem.physical_and_invitro.data <- add_chemtable(
CvT.chems.nona,
current.table=chem.physical_and_invitro.data,
data.list=list(
Compound="PREFERRED_NAME",
DTXSID="DTXSID",
CAS="CASRN",
Funbound.plasma="Human.Fup.httk",
Clint="Human.Clint.httk"),
species="Human",
reference="InVitro",
overwrite=TRUE)
print(paste("HTTK parameters for",length(unique(c(
get_cheminfo(model="pbtk"),
get_cheminfo(model="gas_pbtk")))),
"chemicals for PBTK"))
level2tab.invitro.list <- makeCvTpreds(CvT.data,"HTTK-InVitro")
level2tab.invitro <- level2tab.invitro.list$cvt
level2tab.invitro.stats <- level2tab.invitro.list$stats
level3tab.invitro <- maketkstatpreds(CvT.data,fittable,"HTTK-InVitro")
test.chems.dashboard <- read.csv("CvTdb/TestChemsDashboardInfo.csv")
test.chems.dashboard <- subset(test.chems.dashboard, !duplicated(test.chems.dashboard))
dim(test.chems.dashboard)
test.chems.dashboard <- read.csv("CvTdb/TestChemsDashboardInfo.csv")
dim(test.chems.dashboard)
test.chems.dashboard <- read.csv("CvTdb/TestChemsDashboardInfo.csv")
dim(test.chems.dashboard)
colnames(test.chems.dashboard)
